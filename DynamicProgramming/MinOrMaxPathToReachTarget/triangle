https://leetcode.com/problems/triangle/

Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
 Output: 11
 Explanation: The triangle looks like:
    2
   3 4
  6 5 7
 4 1 8 3
 The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).

// From top down - using 1 D array
Iterative : elements come from i and i-1

[2 INT_MAX INT_MAX INT_MAX]
[5 6 INT_MAX INT_MAX]
[11 10 13 INT_MAX]
[14 11 18 16]

Ans: 11

   2
  3 4
 6 5 7
4 1 8 3

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        if(n == 1){
            return triangle[0][0];
        }
        int maxlen = triangle[n-1].size();
        int dp[maxlen];
        memset(dp,10001,sizeof(dp));
        int minpathsum = INT_MAX;
        dp[0] = triangle[0][0];
        for(int i = 1;i < n;i++){
            int arrsize = triangle[i].size();
            int arr[arrsize];

            for(int j = 0;j < arrsize;j++){
                if(j > 0){
                    arr[j] = triangle[i][j] + min(dp[j], dp[j-1]);
                }else{
                    arr[j] = triangle[i][j] + dp[j];
                }
            }
            for(int k = 0;k < arrsize;k++){
                dp[k] = arr[k];
            }
        }
        for(int k = 0;k < maxlen;k++){
            cout<<dp[k]<<" ";
            minpathsum = min(minpathsum, dp[k]);
        }
        return minpathsum;
    }
};

// From bottom up - using 2 D array
11
9 10
7 6 10
4 1 8 3


class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        vector<vector<int>> dp = triangle;
        for(int i = triangle.size() - 2; i >= 0; i--){
            for(int j = 0;j < triangle[i].size();j++){
                dp[i][j] = triangle[i][j] + min(dp[i+1][j], dp[i+1][j+1]);
            }
        }
        return dp[0][0];
    }
};



// From bottom up - using 1 D array
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        vector<int> dp(triangle.back());
        for(int i = triangle.size() - 2; i >= 0; i--){
            for(int j = 0;j < triangle[i].size();j++){
                dp[j] = triangle[i][j] + min(dp[j], dp[j+1]);
            }
        }
        return dp[0];
    }
};
