https://leetcode.com/problems/minimum-path-sum/


Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.



Example 1:

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


//Iterative
class Solution {
public:

    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        dp[0][0] = grid[0][0];
        for(int i = 1;i < m;i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        for(int j = 1;j < n;j++){
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        for(int i = 1;i < m;i++){
            for(int j = 1;j < n;j++){
                dp[i][j] = grid[i][j] + min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
};

//Recursive
class Solution {
public:
    int fun(vector<vector<int>> &grid,int m,int n,vector<vector<int>> &dp){
        if(dp[m-1][n-1] != -1){
            return dp[m-1][n-1];
        }
        if(m == 1 && n == 1){
            return dp[m-1][n-1] = grid[m-1][n-1];
        }else if(m == 1){
            return dp[m-1][n-1] = grid[m-1][n-1] + fun(grid,m,n-1,dp);
        }else if(n == 1){
            return dp[m-1][n] = grid[m-1][n-1] + fun(grid,m-1,n,dp);
        }else{
            return dp[m-1][n-1] = grid[m-1][n-1] + min(fun(grid,m-1,n,dp), fun(grid,m,n-1,dp));
        }
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        for(int i = 0;i < m;i++){
            for(int j = 0;j < n;j++){
                dp[i][j] = -1;
            }
        }
        return fun(grid,m,n,dp);
    }
};